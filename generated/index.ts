/* Autogenerated file. Do not edit manually. */

import { PonderApp } from "@ponder/core";
import type {
  Block,
  Log,
  Transaction,
  Model,
  ReadOnlyContract,
} from "@ponder/core";
import type { AbiParameterToPrimitiveType } from "abitype";
import type { BlockTag, Hash } from "viem";

/* ENTITY TYPES */

export type submitVote = {
  id: string;
  propId: bigint;
  address: string;
  support: boolean;
  votingPower: bigint;
};
export type ProposalCreated = {
  id: bigint;
  creator: string;
};
export type propExecuted = {
  id: bigint;
};

/* CONTRACT TYPES */

const DydxGovernorAbi = [
  {
    inputs: [],
    name: "ADD_EXECUTOR_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DOMAIN_TYPEHASH",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "EIP712_DOMAIN_NAME",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OWNER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTE_EMITTED_TYPEHASH",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGovernanceStrategy",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }],
    name: "getProposalById",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "id", type: "uint256" },
          { internalType: "address", name: "creator", type: "address" },
          {
            internalType: "contract IExecutorWithTimelock",
            name: "executor",
            type: "address",
          },
          { internalType: "address[]", name: "targets", type: "address[]" },
          { internalType: "uint256[]", name: "values", type: "uint256[]" },
          { internalType: "string[]", name: "signatures", type: "string[]" },
          { internalType: "bytes[]", name: "calldatas", type: "bytes[]" },
          { internalType: "bool[]", name: "withDelegatecalls", type: "bool[]" },
          { internalType: "uint256", name: "startBlock", type: "uint256" },
          { internalType: "uint256", name: "endBlock", type: "uint256" },
          { internalType: "uint256", name: "executionTime", type: "uint256" },
          { internalType: "uint256", name: "forVotes", type: "uint256" },
          { internalType: "uint256", name: "againstVotes", type: "uint256" },
          { internalType: "bool", name: "executed", type: "bool" },
          { internalType: "bool", name: "canceled", type: "bool" },
          { internalType: "address", name: "strategy", type: "address" },
          { internalType: "bytes32", name: "ipfsHash", type: "bytes32" },
        ],
        internalType: "struct IDydxGovernor.ProposalWithoutVotes",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }],
    name: "getProposalState",
    outputs: [
      {
        internalType: "enum IDydxGovernor.ProposalState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProposalsCount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "proposalId", type: "uint256" },
      { internalType: "address", name: "voter", type: "address" },
    ],
    name: "getVoteOnProposal",
    outputs: [
      {
        components: [
          { internalType: "bool", name: "support", type: "bool" },
          { internalType: "uint248", name: "votingPower", type: "uint248" },
        ],
        internalType: "struct IDydxGovernor.Vote",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVotingDelay",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "executor", type: "address" }],
    name: "isExecutorAuthorized",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
] as const;

export type DydxGovernor = ReadOnlyContract<typeof DydxGovernorAbi>;

/* CONTEXT TYPES */

export type Context = {
  contracts: {
    DydxGovernor: DydxGovernor;
  };
  entities: {
    submitVote: Model<submitVote>;
    ProposalCreated: Model<ProposalCreated>;
    propExecuted: Model<propExecuted>;
  };
};

/* HANDLER TYPES */

export type AppType = {
  ["setup"]: ({ context }: { context: Context }) => Promise<any> | any;
  ["DydxGovernor:ExecutorAuthorized"]: ({
    event,
    context,
  }: {
    event: {
      name: "ExecutorAuthorized";
      params: {
        executor: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "address";
          name: "executor";
          type: "address";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:ExecutorUnauthorized"]: ({
    event,
    context,
  }: {
    event: {
      name: "ExecutorUnauthorized";
      params: {
        executor: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "address";
          name: "executor";
          type: "address";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:GovernanceStrategyChanged"]: ({
    event,
    context,
  }: {
    event: {
      name: "GovernanceStrategyChanged";
      params: {
        newStrategy: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "newStrategy";
          type: "address";
        }>;
        initiatorChange: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "initiatorChange";
          type: "address";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:ProposalCanceled"]: ({
    event,
    context,
  }: {
    event: {
      name: "ProposalCanceled";
      params: {
        id: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "id";
          type: "uint256";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:ProposalCreated"]: ({
    event,
    context,
  }: {
    event: {
      name: "ProposalCreated";
      params: {
        id: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "id";
          type: "uint256";
        }>;
        creator: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "creator";
          type: "address";
        }>;
        executor: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "contract IExecutorWithTimelock";
          name: "executor";
          type: "address";
        }>;
        targets: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "address[]";
          name: "targets";
          type: "address[]";
        }>;
        values: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256[]";
          name: "values";
          type: "uint256[]";
        }>;
        signatures: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "string[]";
          name: "signatures";
          type: "string[]";
        }>;
        calldatas: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "bytes[]";
          name: "calldatas";
          type: "bytes[]";
        }>;
        withDelegatecalls: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "bool[]";
          name: "withDelegatecalls";
          type: "bool[]";
        }>;
        startBlock: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "startBlock";
          type: "uint256";
        }>;
        endBlock: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "endBlock";
          type: "uint256";
        }>;
        strategy: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "address";
          name: "strategy";
          type: "address";
        }>;
        ipfsHash: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "bytes32";
          name: "ipfsHash";
          type: "bytes32";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:ProposalExecuted"]: ({
    event,
    context,
  }: {
    event: {
      name: "ProposalExecuted";
      params: {
        id: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "id";
          type: "uint256";
        }>;
        initiatorExecution: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "initiatorExecution";
          type: "address";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:ProposalQueued"]: ({
    event,
    context,
  }: {
    event: {
      name: "ProposalQueued";
      params: {
        id: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "id";
          type: "uint256";
        }>;
        executionTime: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "executionTime";
          type: "uint256";
        }>;
        initiatorQueueing: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "initiatorQueueing";
          type: "address";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:RoleAdminChanged"]: ({
    event,
    context,
  }: {
    event: {
      name: "RoleAdminChanged";
      params: {
        role: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        }>;
        previousAdminRole: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "bytes32";
          name: "previousAdminRole";
          type: "bytes32";
        }>;
        newAdminRole: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "bytes32";
          name: "newAdminRole";
          type: "bytes32";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:RoleGranted"]: ({
    event,
    context,
  }: {
    event: {
      name: "RoleGranted";
      params: {
        role: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        }>;
        account: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "account";
          type: "address";
        }>;
        sender: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:RoleRevoked"]: ({
    event,
    context,
  }: {
    event: {
      name: "RoleRevoked";
      params: {
        role: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        }>;
        account: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "account";
          type: "address";
        }>;
        sender: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:VoteEmitted"]: ({
    event,
    context,
  }: {
    event: {
      name: "VoteEmitted";
      params: {
        id: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "id";
          type: "uint256";
        }>;
        voter: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "voter";
          type: "address";
        }>;
        support: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "bool";
          name: "support";
          type: "bool";
        }>;
        votingPower: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "votingPower";
          type: "uint256";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
  ["DydxGovernor:VotingDelayChanged"]: ({
    event,
    context,
  }: {
    event: {
      name: "VotingDelayChanged";
      params: {
        newVotingDelay: AbiParameterToPrimitiveType<{
          indexed: false;
          internalType: "uint256";
          name: "newVotingDelay";
          type: "uint256";
        }>;
        initiatorChange: AbiParameterToPrimitiveType<{
          indexed: true;
          internalType: "address";
          name: "initiatorChange";
          type: "address";
        }>;
      };
      log: Log;
      block: Block;
      transaction: Transaction;
    };
    context: Context;
  }) => Promise<any> | any;
};

export const ponder = new PonderApp<AppType>();
